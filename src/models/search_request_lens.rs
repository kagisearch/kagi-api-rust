/*
 * Kagi API
 *
 * The Kagi API provides programmatic access to data that powers our search results & more.   Quick start for all APIs:  - Create an account at [Kagi](https://kagi.com/signup) - Generate an [API key](https://kagi.com/settings?p=api) - Call the API  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  ### Free  - Kagi Small Web RSS feed (public)  ### Official Client Libraries  We offer the following libraries you can use to interact with the Kagi API. These are generated from an OpenAPI spec. If you have a language you would like to use and it's not in the list, send us a message and we will add it to the list if it is supported. Or you can use the [spec](https://wild-wombat.redocly.app/_spec/openapi.yaml?download) to build your own custom library.  - [Golang](https://github.com/kagisearch/kagi-api-golang) - [Python](https://github.com/kagisearch/kagi-api-python) - [Rust](https://github.com/kagisearch/kagi-api-rust)  ### Unofficial Client Libraries  There also exist third party libraries for interacting with the Kagi API.  - [kagigo for Go](https://github.com/httpjamesm/kagigo) - FastGPT & Universal Summarizer - [kagi-api](https://crates.io/crates/kagi-api) for Rust - [kagi-api](https://alchemists.io/projects/kagi-api) for Ruby - [kagi-dotnet](https://github.com/patchoulish/kagi-dotnet) for C#/.NET  ### API Status  Our existing API, the \"v0\" beta API, is being replaced with a new version that will be available publicly soon. As changes are made, we will be updating the documentation below when the new features become available.  See the [Support and Community](https://help.kagi.com/kagi/support-and-community/) section for details. ### Pricing  We are in the process of moving all APIs to a post-paid tiered system, where each tier has a limit on the number of requests that can be made. If an API has a pricing section, then it is still being migrated over to the new billing system.  ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - [Bug Reports](https://github.com/kagisearch/kagi-docs/issues/new/choose) - [Q&A Forum](https://github.com/kagisearch/kagi-docs/discussions/categories/q-a?discussions_q=category%3AQ%26A+label%3Aproduct%3Akagi_search_api) - [API Feature Requests](https://github.com/kagisearch/kagi-docs/discussions/categories/kagi-search-api-feature-requests-ideas)  ### Discord Join our [Discord](https://kagi.com/discord)! Good for quick questions or chatting about things you've made with our APIs! 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@kagi.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SearchRequestLens : An inline description of a lens to apply to the search. Options supplied by the lens take pecedent over those supplied by the user in their search terms (e.g., `site:` operators), allowing you to restrict the scope of the search to return more relevant results in specific applications.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchRequestLens {
    /// A list of domains to restrict the search to.
    #[serde(rename = "sites_included", skip_serializing_if = "Option::is_none")]
    pub sites_included: Option<Vec<String>>,
    /// A list of domains to restrict the search to.
    #[serde(rename = "sites_excluded", skip_serializing_if = "Option::is_none")]
    pub sites_excluded: Option<Vec<String>>,
    /// A list of keywords to filter results on, such that every result *must* contain these terms.
    #[serde(rename = "keywords_included", skip_serializing_if = "Option::is_none")]
    pub keywords_included: Option<Vec<String>>,
    /// A list of keywords to filter results on, such that any result containing these terms is removed.
    #[serde(rename = "keywords_excluded", skip_serializing_if = "Option::is_none")]
    pub keywords_excluded: Option<Vec<String>>,
    /// A specific file type to search for. (e.g., `pdf`)
    #[serde(rename = "file_type", skip_serializing_if = "Option::is_none")]
    pub file_type: Option<String>,
    /// Filters for web pages that have been updated or published *after* the given date (`YYYY-MM-DD`).
    #[serde(rename = "time_after", skip_serializing_if = "Option::is_none")]
    pub time_after: Option<String>,
    /// Filters for web pages that have been updated or published *before* the given date (`YYYY-MM-DD`).
    #[serde(rename = "time_before", skip_serializing_if = "Option::is_none")]
    pub time_before: Option<String>,
    /// Filters for web pages that have been updated or published in the given interval, relative to today's date.
    #[serde(rename = "time_relative", skip_serializing_if = "Option::is_none")]
    pub time_relative: Option<TimeRelative>,
    /// Requests results localized to a specific region. Can be any valid [ISO-3166-1 Alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements), or the special value `no_region`, that will try to get the most general results possible.
    #[serde(rename = "search_region", skip_serializing_if = "Option::is_none")]
    pub search_region: Option<String>,
}

impl SearchRequestLens {
    /// An inline description of a lens to apply to the search. Options supplied by the lens take pecedent over those supplied by the user in their search terms (e.g., `site:` operators), allowing you to restrict the scope of the search to return more relevant results in specific applications.
    pub fn new() -> SearchRequestLens {
        SearchRequestLens {
            sites_included: None,
            sites_excluded: None,
            keywords_included: None,
            keywords_excluded: None,
            file_type: None,
            time_after: None,
            time_before: None,
            time_relative: None,
            search_region: None,
        }
    }
}
/// Filters for web pages that have been updated or published in the given interval, relative to today's date.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TimeRelative {
    #[serde(rename = "day")]
    Day,
    #[serde(rename = "week")]
    Week,
    #[serde(rename = "month")]
    Month,
}

impl Default for TimeRelative {
    fn default() -> TimeRelative {
        Self::Day
    }
}

