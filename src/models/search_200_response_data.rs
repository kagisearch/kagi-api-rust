/*
 * Kagi API
 *
 * The Kagi API provides programmatic access to data that powers our search results & more.   Quick start for all APIs:  - Create an account at [Kagi](https://kagi.com/signup) - Generate an [API key](https://kagi.com/settings?p=api) - Call the API  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  ### Free  - Kagi Small Web RSS feed (public)  ### Official Client Libraries  We offer the following libraries you can use to interact with the Kagi API. These are generated from an OpenAPI spec. If you have a language you would like to use and it's not in the list, send us a message and we will add it to the list if it is supported. Or you can use the [spec](https://wild-wombat.redocly.app/_spec/openapi.yaml?download) to build your own custom library.  - [Golang](https://github.com/kagisearch/kagi-api-golang) - [Python](https://github.com/kagisearch/kagi-api-python) - [Rust](https://github.com/kagisearch/kagi-api-rust)  ### Unofficial Client Libraries  There also exist third party libraries for interacting with the Kagi API.  - [kagigo for Go](https://github.com/httpjamesm/kagigo) - FastGPT & Universal Summarizer - [kagi-api](https://crates.io/crates/kagi-api) for Rust - [kagi-api](https://alchemists.io/projects/kagi-api) for Ruby - [kagi-dotnet](https://github.com/patchoulish/kagi-dotnet) for C#/.NET  ### API Status  Our existing API, the \"v0\" beta API, is being replaced with a new version that will be available publicly soon. As changes are made, we will be updating the documentation below when the new features become available.  See the [Support and Community](https://help.kagi.com/kagi/support-and-community/) section for details. ### Pricing  We are in the process of moving all APIs to a post-paid tiered system, where each tier has a limit on the number of requests that can be made. If an API has a pricing section, then it is still being migrated over to the new billing system.  ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - [Bug Reports](https://github.com/kagisearch/kagi-docs/issues/new/choose) - [Q&A Forum](https://github.com/kagisearch/kagi-docs/discussions/categories/q-a?discussions_q=category%3AQ%26A+label%3Aproduct%3Akagi_search_api) - [API Feature Requests](https://github.com/kagisearch/kagi-docs/discussions/categories/kagi-search-api-feature-requests-ideas)  ### Discord Join our [Discord](https://kagi.com/discord)! Good for quick questions or chatting about things you've made with our APIs! 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@kagi.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Search200ResponseData : Holds all the search results for the query specified. As results have different types and sources, they are spearated into different fields within this object. For example image results are stored under `data.image` while news results are stored under `data.news`. All results will have the same main structure, but additional data might be stored under the `data.{name}[].props` path. Please look at each different type of result for more information about this.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Search200ResponseData {
    /// Contains all search results for html pages or wedbsites.
    #[serde(rename = "search", skip_serializing_if = "Option::is_none")]
    pub search: Option<Vec<models::SearchResult>>,
    /// Contains all search results for images.
    #[serde(rename = "image", skip_serializing_if = "Option::is_none")]
    pub image: Option<Vec<models::SearchResult>>,
    /// Contains all search results for videos.
    #[serde(rename = "video", skip_serializing_if = "Option::is_none")]
    pub video: Option<Vec<models::SearchResult>>,
    /// Contains all search results for podcasts.
    #[serde(rename = "podcast", skip_serializing_if = "Option::is_none")]
    pub podcast: Option<Vec<models::SearchResult>>,
    /// Contains all search results for creators of podcasta.
    #[serde(rename = "podcast_creator", skip_serializing_if = "Option::is_none")]
    pub podcast_creator: Option<Vec<models::SearchResult>>,
    /// Contains all search results for news articles.
    #[serde(rename = "news", skip_serializing_if = "Option::is_none")]
    pub news: Option<Vec<models::SearchResult>>,
    /// Contains results that are obtained by searching for slightly different queries. These questions are stored under the `props.question` path.
    #[serde(rename = "adjacent_question", skip_serializing_if = "Option::is_none")]
    pub adjacent_question: Option<Vec<models::SearchResult>>,
    /// If the search query was a math equation, or unit conversions, things that can be answered quickly, the result will be in here.
    #[serde(rename = "direct_answer", skip_serializing_if = "Option::is_none")]
    pub direct_answer: Option<Vec<models::SearchResult>>,
    /// Contains news results from publishers collected and stored in Kagis' news index.
    #[serde(rename = "interesting_news", skip_serializing_if = "Option::is_none")]
    pub interesting_news: Option<Vec<models::SearchResult>>,
    /// Contains small web results from publishers collected and stored in Kagis' small web index.
    #[serde(rename = "interesting_finds", skip_serializing_if = "Option::is_none")]
    pub interesting_finds: Option<Vec<models::SearchResult>>,
    /// Contains detailed summary and tabulated information about a person, place, or thing.
    #[serde(rename = "infobox", skip_serializing_if = "Option::is_none")]
    pub infobox: Option<Vec<models::SearchResult>>,
    /// Contains all search results that link to code resources or repositories.
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<Vec<models::SearchResult>>,
    /// If the search query was a package tracking number, the correct package tracking website should be present in this collection.
    #[serde(rename = "package_tracking", skip_serializing_if = "Option::is_none")]
    pub package_tracking: Option<Vec<models::SearchResult>>,
    /// Contains all search results for public records, such as government documents, or public court records.
    #[serde(rename = "public_records", skip_serializing_if = "Option::is_none")]
    pub public_records: Option<Vec<models::SearchResult>>,
    /// Contains all search results for the current weather.
    #[serde(rename = "weather", skip_serializing_if = "Option::is_none")]
    pub weather: Option<Vec<models::SearchResult>>,
    /// Contains a list of searches that are related to the current search, and may help narrow down the results.
    #[serde(rename = "related_search", skip_serializing_if = "Option::is_none")]
    pub related_search: Option<Vec<models::SearchResult>>,
    /// Contains all search results that are lists of things. Results with titles like \"5 things you didn't know about...\", or \"10 of the best headphones\".
    #[serde(rename = "listicle", skip_serializing_if = "Option::is_none")]
    pub listicle: Option<Vec<models::SearchResult>>,
    /// Contains all search results for archived websites that may not be available anymore
    #[serde(rename = "web_archive", skip_serializing_if = "Option::is_none")]
    pub web_archive: Option<Vec<models::SearchResult>>,
}

impl Search200ResponseData {
    /// Holds all the search results for the query specified. As results have different types and sources, they are spearated into different fields within this object. For example image results are stored under `data.image` while news results are stored under `data.news`. All results will have the same main structure, but additional data might be stored under the `data.{name}[].props` path. Please look at each different type of result for more information about this.
    pub fn new() -> Search200ResponseData {
        Search200ResponseData {
            search: None,
            image: None,
            video: None,
            podcast: None,
            podcast_creator: None,
            news: None,
            adjacent_question: None,
            direct_answer: None,
            interesting_news: None,
            interesting_finds: None,
            infobox: None,
            code: None,
            package_tracking: None,
            public_records: None,
            weather: None,
            related_search: None,
            listicle: None,
            web_archive: None,
        }
    }
}

