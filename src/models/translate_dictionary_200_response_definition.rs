/*
 * Kagi API
 *
 * The Kagi API provides programmatic access to data that powers our search results & more.   Quick start for all APIs:  - Create an account at [Kagi](https://kagi.com/signup) - Generate an [API key](https://kagi.com/settings?p=api) - Call the API  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  ### Free  - Kagi Small Web RSS feed (public)  ### Official Client Libraries  We offer the following libraries you can use to interact with the Kagi API. These are generated from an OpenAPI spec. If you have a language you would like to use and it's not in the list, send us a message and we will add it to the list if it is supported. Or you can use the [spec](https://wild-wombat.redocly.app/_spec/openapi.yaml?download) to build your own custom library.  - [Golang](https://github.com/kagisearch/kagi-api-golang) - [Python](https://github.com/kagisearch/kagi-api-python)  ### Unofficial Client Libraries  There also exist third party libraries for interacting with the Kagi API.  - [kagigo for Go](https://github.com/httpjamesm/kagigo) - FastGPT & Universal Summarizer - [kagi-api](https://crates.io/crates/kagi-api) for Rust - [kagi-api](https://alchemists.io/projects/kagi-api) for Ruby - [kagi-dotnet](https://github.com/patchoulish/kagi-dotnet) for C#/.NET  ### API Status  Our existing API, the \"v0\" beta API, is being replaced with a new version that will be available publicly soon. As changes are made, we will be updating the documentation below when the new features become available.  See the [Support and Community](https://help.kagi.com/kagi/support-and-community/) section for details. ### Pricing  We are in the process of moving all APIs to a post-paid tiered system, where each tier has a limit on the number of requests that can be made. If an API has a pricing section, then it is still being migrated over to the new billing system.  ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - [Bug Reports](https://github.com/kagisearch/kagi-docs/issues/new/choose) - [Q&A Forum](https://github.com/kagisearch/kagi-docs/discussions/categories/q-a?discussions_q=category%3AQ%26A+label%3Aproduct%3Akagi_search_api) - [API Feature Requests](https://github.com/kagisearch/kagi-docs/discussions/categories/kagi-search-api-feature-requests-ideas)  ### Discord Join our [Discord](https://kagi.com/discord)! Good for quick questions or chatting about things you've made with our APIs! 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@kagi.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TranslateDictionary200ResponseDefinition : Structured definition of the word
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TranslateDictionary200ResponseDefinition {
    /// The word being defined (remains in word_language)
    #[serde(rename = "word", skip_serializing_if = "Option::is_none")]
    pub word: Option<String>,
    #[serde(rename = "primary_meaning", skip_serializing_if = "Option::is_none")]
    pub primary_meaning: Option<Box<models::TranslateDictionary200ResponseDefinitionPrimaryMeaning>>,
    /// Secondary or less common meanings
    #[serde(rename = "secondary_meanings", skip_serializing_if = "Option::is_none")]
    pub secondary_meanings: Option<Vec<models::TranslateDictionary200ResponseDefinitionSecondaryMeaningsInner>>,
    /// Example sentences showing usage (remains in word_language, but includes translations in parentheses when word_language differs from definition_language)
    #[serde(rename = "examples", skip_serializing_if = "Option::is_none")]
    pub examples: Option<Vec<String>>,
    /// Phonetic pronunciation of the word in its original language (if available)
    #[serde(rename = "pronunciation", skip_serializing_if = "Option::is_none")]
    pub pronunciation: Option<String>,
    /// Information about word origin (translated to definition_language if available)
    #[serde(rename = "etymology", skip_serializing_if = "Option::is_none")]
    pub etymology: Option<String>,
    /// Brief usage notes, cultural context, or helpful tips for language learners (translated to definition_language)
    #[serde(rename = "notes", skip_serializing_if = "Option::is_none")]
    pub notes: Option<String>,
    /// Optional usage trend indicator. Always in English as an enum value. Only provided when trend data is clear and meaningful.
    #[serde(rename = "temporal_trend", skip_serializing_if = "Option::is_none")]
    pub temporal_trend: Option<TemporalTrend>,
    /// Grammatical gender for nouns in languages that have gender. Always in English as an enum value. Only included for nouns in gendered languages.
    #[serde(rename = "gender", skip_serializing_if = "Option::is_none")]
    pub gender: Option<Gender>,
    /// Plural form of the word (remains in word_language). Only included for irregular or non-standard plurals.
    #[serde(rename = "plural", skip_serializing_if = "Option::is_none")]
    pub plural: Option<String>,
    /// Brief notes about verb conjugation irregularities (remains in word_language). Only included for verbs with notable irregularities.
    #[serde(rename = "conjugation_notes", skip_serializing_if = "Option::is_none")]
    pub conjugation_notes: Option<String>,
    /// Related words from the same root or word family (remains in word_language)
    #[serde(rename = "related_words", skip_serializing_if = "Option::is_none")]
    pub related_words: Option<Vec<String>>,
}

impl TranslateDictionary200ResponseDefinition {
    /// Structured definition of the word
    pub fn new() -> TranslateDictionary200ResponseDefinition {
        TranslateDictionary200ResponseDefinition {
            word: None,
            primary_meaning: None,
            secondary_meanings: None,
            examples: None,
            pronunciation: None,
            etymology: None,
            notes: None,
            temporal_trend: None,
            gender: None,
            plural: None,
            conjugation_notes: None,
            related_words: None,
        }
    }
}
/// Optional usage trend indicator. Always in English as an enum value. Only provided when trend data is clear and meaningful.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TemporalTrend {
    #[serde(rename = "increasing")]
    Increasing,
    #[serde(rename = "stable")]
    Stable,
    #[serde(rename = "decreasing")]
    Decreasing,
}

impl Default for TemporalTrend {
    fn default() -> TemporalTrend {
        Self::Increasing
    }
}
/// Grammatical gender for nouns in languages that have gender. Always in English as an enum value. Only included for nouns in gendered languages.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Gender {
    #[serde(rename = "masculine")]
    Masculine,
    #[serde(rename = "feminine")]
    Feminine,
    #[serde(rename = "neuter")]
    Neuter,
    #[serde(rename = "common")]
    Common,
}

impl Default for Gender {
    fn default() -> Gender {
        Self::Masculine
    }
}

