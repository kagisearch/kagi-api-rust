/*
 * Kagi API
 *
 * The Kagi API provides programmatic access to data that powers our search results & more.   Quick start for all APIs:  - Create an account at [Kagi](https://kagi.com/signup) - Generate an [API key](https://kagi.com/settings?p=api) - Call the API  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  ### Free  - Kagi Small Web RSS feed (public)  ### Official Client Libraries  We offer the following libraries you can use to interact with the Kagi API. These are generated from an OpenAPI spec. If you have a language you would like to use and it's not in the list, send us a message and we will add it to the list if it is supported. Or you can use the [spec](https://wild-wombat.redocly.app/_spec/openapi.yaml?download) to build your own custom library.  - [Golang](https://github.com/kagisearch/kagi-api-golang) - [Python](https://github.com/kagisearch/kagi-api-python)  ### Unofficial Client Libraries  There also exist third party libraries for interacting with the Kagi API.  - [kagigo for Go](https://github.com/httpjamesm/kagigo) - FastGPT & Universal Summarizer - [kagi-api](https://crates.io/crates/kagi-api) for Rust - [kagi-api](https://alchemists.io/projects/kagi-api) for Ruby - [kagi-dotnet](https://github.com/patchoulish/kagi-dotnet) for C#/.NET  ### API Status  Our existing API, the \"v0\" beta API, is being replaced with a new version that will be available publicly soon. As changes are made, we will be updating the documentation below when the new features become available.  See the [Support and Community](https://help.kagi.com/kagi/support-and-community/) section for details. ### Pricing  We are in the process of moving all APIs to a post-paid tiered system, where each tier has a limit on the number of requests that can be made. If an API has a pricing section, then it is still being migrated over to the new billing system.  ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - [Bug Reports](https://github.com/kagisearch/kagi-docs/issues/new/choose) - [Q&A Forum](https://github.com/kagisearch/kagi-docs/discussions/categories/q-a?discussions_q=category%3AQ%26A+label%3Aproduct%3Akagi_search_api) - [API Feature Requests](https://github.com/kagisearch/kagi-docs/discussions/categories/kagi-search-api-feature-requests-ideas)  ### Discord Join our [Discord](https://kagi.com/discord)! Good for quick questions or chatting about things you've made with our APIs! 
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@kagi.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`translate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TranslateError {
    Status400(models::Translate400Response),
    Status500(models::Translate500Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`translate_alternatives`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TranslateAlternativesError {
    Status401(models::TranslateAlternatives401Response),
    Status402(models::TranslateAlternatives402Response),
    Status500(models::TranslateAlternatives500Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`translate_detect`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TranslateDetectError {
    Status400(models::TranslateDetect400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`translate_dictionary`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TranslateDictionaryError {
    Status400(models::TranslateDictionary400Response),
    Status500(models::TranslateDictionary500Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`translate_list_languages`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TranslateListLanguagesError {
    Status401(models::ExampleError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`translate_romanize`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TranslateRomanizeError {
    Status400(models::TranslateDetect400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`translate_word_insights`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TranslateWordInsightsError {
    Status400(models::TranslateWordInsights400Response),
    Status401(models::TranslateAlternatives401Response),
    Status402(models::TranslateAlternatives402Response),
    Status500(models::TranslateWordInsights500Response),
    UnknownValue(serde_json::Value),
}


/// Translates text between languages with customizable options for gender, formality, and style. Supports both single text translation and efficient batch translation of multiple text snippets with context awareness.
pub async fn translate(configuration: &configuration::Configuration, translate_request: models::TranslateRequest) -> Result<models::Translate200Response, Error<TranslateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_translate_request = translate_request;

    let uri_str = format!("{}/api/translate", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_translate_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Translate200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Translate200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TranslateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Provides alternative translation options for a given text with explanations. Supports two modes: standard mode (alternatives for a full translation) and partial mode (alternative ways to phrase a specific part of a translation).
pub async fn translate_alternatives(configuration: &configuration::Configuration, original_text: &str, existing_translation: &str, target_lang: &str, source_lang: Option<&str>, target_explanation_language: Option<&str>, translation_options: Option<&str>, partial_translation: Option<&str>) -> Result<models::TranslateAlternatives200Response, Error<TranslateAlternativesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_original_text = original_text;
    let p_existing_translation = existing_translation;
    let p_target_lang = target_lang;
    let p_source_lang = source_lang;
    let p_target_explanation_language = target_explanation_language;
    let p_translation_options = translation_options;
    let p_partial_translation = partial_translation;

    let uri_str = format!("{}/alternative-translations", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut multipart_form = reqwest::multipart::Form::new();
    multipart_form = multipart_form.text("original_text", p_original_text.to_string());
    multipart_form = multipart_form.text("existing_translation", p_existing_translation.to_string());
    if let Some(param_value) = p_source_lang {
        multipart_form = multipart_form.text("source_lang", param_value.to_string());
    }
    multipart_form = multipart_form.text("target_lang", p_target_lang.to_string());
    if let Some(param_value) = p_target_explanation_language {
        multipart_form = multipart_form.text("target_explanation_language", param_value.to_string());
    }
    if let Some(param_value) = p_translation_options {
        multipart_form = multipart_form.text("translation_options", param_value.to_string());
    }
    if let Some(param_value) = p_partial_translation {
        multipart_form = multipart_form.text("partial_translation", param_value.to_string());
    }
    req_builder = req_builder.multipart(multipart_form);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TranslateAlternatives200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TranslateAlternatives200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TranslateAlternativesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Detects the language of the provided text.
pub async fn translate_detect(configuration: &configuration::Configuration, translate_detect_request: models::TranslateDetectRequest) -> Result<models::TranslateDetect200Response, Error<TranslateDetectError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_translate_detect_request = translate_detect_request;

    let uri_str = format!("{}/api/detect", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_translate_detect_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TranslateDetect200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TranslateDetect200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TranslateDetectError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Provides dictionary definitions for words in different languages.  **Translation behavior:** - Fields translated to `definition_language`: definition, notes, etymology, part_of_speech, usage_level, dialect - Fields that remain in `word_language`: word, synonyms, pronunciation, plural, related_words, examples (with translations in parentheses when languages differ) - Fields always in English (strict enums): gender (\"masculine\", \"feminine\", \"neuter\", \"common\"), temporal_trend (\"increasing\", \"stable\", \"decreasing\") 
pub async fn translate_dictionary(configuration: &configuration::Configuration, translate_dictionary_request: models::TranslateDictionaryRequest) -> Result<models::TranslateDictionary200Response, Error<TranslateDictionaryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_translate_dictionary_request = translate_dictionary_request;

    let uri_str = format!("{}/api/dictionary", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_translate_dictionary_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TranslateDictionary200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TranslateDictionary200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TranslateDictionaryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a list of languages supported by the translation API.  The response includes language codes, names, and whether each language supports formality settings. 
pub async fn translate_list_languages(configuration: &configuration::Configuration, r#type: Option<&str>, locale: Option<&str>) -> Result<Vec<models::TranslateListLanguages200ResponseInner>, Error<TranslateListLanguagesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_type = r#type;
    let p_locale = locale;

    let uri_str = format!("{}/api/list-languages", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_type {
        req_builder = req_builder.query(&[("type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_locale {
        req_builder = req_builder.query(&[("locale", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::TranslateListLanguages200ResponseInner&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::TranslateListLanguages200ResponseInner&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TranslateListLanguagesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Converts non-Latin script text to Latin script (romanization/transliteration). Uses standardized romanization styles for each language: Hepburn for Japanese, Pinyin for Chinese, ALA-LC for Arabic, etc.
pub async fn translate_romanize(configuration: &configuration::Configuration, text: &str, language: &str) -> Result<models::TranslateRomanize200Response, Error<TranslateRomanizeError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_text = text;
    let p_language = language;

    let uri_str = format!("{}/api/romanize", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("text", &p_text.to_string())]);
    req_builder = req_builder.query(&[("language", &p_language.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TranslateRomanize200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TranslateRomanize200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TranslateRomanizeError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Provides detailed linguistic insights and alternatives for translated text. The API identifies 3-5 key words or phrases in the translated text that have meaningful alternative expressions, and returns:  1. A marked version of the translation with insight markers 2. Alternative expressions for each identified word/phrase 3. Brief explanations for each alternative in the target explanation language 4. Type labels categorizing each insight (e.g., \"Lexical choice\", \"Cultural reference\") 
pub async fn translate_word_insights(configuration: &configuration::Configuration, original_text: &str, translated_text: &str, target_explanation_language: Option<&str>, translation_options: Option<&str>) -> Result<models::TranslateWordInsights200Response, Error<TranslateWordInsightsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_original_text = original_text;
    let p_translated_text = translated_text;
    let p_target_explanation_language = target_explanation_language;
    let p_translation_options = translation_options;

    let uri_str = format!("{}/api/word-insights", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut multipart_form = reqwest::multipart::Form::new();
    multipart_form = multipart_form.text("original_text", p_original_text.to_string());
    multipart_form = multipart_form.text("translated_text", p_translated_text.to_string());
    if let Some(param_value) = p_target_explanation_language {
        multipart_form = multipart_form.text("target_explanation_language", param_value.to_string());
    }
    if let Some(param_value) = p_translation_options {
        multipart_form = multipart_form.text("translation_options", param_value.to_string());
    }
    req_builder = req_builder.multipart(multipart_form);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TranslateWordInsights200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TranslateWordInsights200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TranslateWordInsightsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

